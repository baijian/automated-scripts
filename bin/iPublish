#!/usr/bin/perl
use strict;
use warnings;

## for my develop environment on mac => egg ache
#BEGIN {
#    push @INC, '/opt/local/lib/perl5/site_perl/5.12.4';
#}
use Net::OpenSSH;
use Term::ANSIColor;

my %confs;
my %servers;
my %versions;
my @errmsg;
my $num = scalar(@ARGV);

#command params selection and handle
if($num == 1) {
    if($ARGV[0] eq "-ml") {
        &modules_list;
    } elsif($ARGV[0] eq "-l" || $ARGV[0] eq "--list"){
        #list all projects' conf
        &list_projects;
    } else {
        &show_help;
    }
} elsif($num == 3) {
    if( ($ARGV[0] eq "-l" || $ARGV[0] eq "--list")
            && ($ARGV[1] eq "-p" || $ARGV[1] eq "--project") ) 
    {
        #list conf of one project
        &list_projects($ARGV[2]);
    } elsif( ($ARGV[0] eq "-p" || $ARGV[0] eq "--project") 
            && ($ARGV[2] eq "-l" || $ARGV[2] eq "--list") )
    {
        #list project's all versions
        &list_versions($ARGV[1]);
    } elsif( ($ARGV[0] eq "-p" || $ARGV[0] eq "--project")
            && ($ARGV[2] eq "-cv") ) 
    {
        #list project's current version
        &current_version($ARGV[1]);
    } else {
        &show_help;
    }
} elsif($num == 4) {
    if( ($ARGV[0] eq "-p" || $ARGV[0] eq "--project") 
            && ($ARGV[2] eq "-v" || $ARGV[2] eq "--version") )
    {
        #publish a new version for a project
        &publish_version($ARGV[1], $ARGV[3]);
    } elsif( ($ARGV[0] eq "-p" || $ARGV[0] eq "--project") 
            && ($ARGV[2] eq "-cv") ) 
    {
        #convert into a new version for a project
        &change_version($ARGV[1], $ARGV[3]);
    } else {
        &show_help;
    }
} else {
    &show_help;
}

sub current_version {
    my ($project_name) = @_;
    &load_conf;
    &project_exist_check($project_name);
    foreach(@{$servers{ "$project_name" }}) {
        my $host = $_->{ "host" };
        my %params = (
            user => $_->{ "user" }
        );
        my $version_file = $confs{ "$project_name" }->{"version_file"};
        my $ssh = Net::OpenSSH->new($host, %params);
        my $cmd = "cat $version_file";
        open my $oldout, ">&", \*STDERR or die "error";
        open STDERR, '>', '/dev/null' or die "error";
        my @out = $ssh->capture( $cmd );
        open STDERR, ">&", $oldout;
        if($ssh->error) {
            print color("red");
            print "You haven't publish a version!\n";
            print color("reset");
        }
        print color("yellow");
        print "@out";
        print color("reset");
        #only get version from one server
        exit;
    }
}

sub change_version {
    my ($project_name, $new_version) = @_;
    &load_conf;
    &project_exist_check($project_name);
    &all_versions_exist_check($project_name, $new_version);
    foreach(@{$servers{ "$project_name" }}) {
        my $host = $_->{ "host" };
        my %params = (
            user => $_->{ "user" }
        );
        my $version_file = $confs{ "$project_name" }->{"version_file"};
        my $ssh = Net::OpenSSH->new($host, %params);
        my $cmd = "echo $new_version > $version_file";
        open my $oldout, ">&", \*STDERR or die "error";
        open STDERR, '>', '/dev/null' or die "error";
        my $out = $ssh->capture( $cmd );
        open STDERR, ">&", $oldout;
        if($ssh->error) {
            print color("red");
            print "$host Change Version to $new_version Failed!\n";
        } else {
            print color("green");
            print "$host Change Version to $new_version Successful.\n";
        }
    }
    print color("reset");
}

sub servers_version_check {
    # check if the version are exists in all servers of a project
    my ($project_name, $version) = @_;
    my $res;
    foreach(@{$servers{ "$project_name" }}) {
        $res = &server_version_check($project_name, $_->{ "host" }, $version);
        if($res) {
            print color("red");;
            print "$version does not exists in".$_->{ "host" }."\n";
            print color("reset");
            exit;
        }
    }
}

#publish a version to every server, check exists one by one.
sub publish_version {
    my ($project_name, $version) = @_;
    &load_conf;
    &project_exist_check($project_name);
    foreach(@{$servers{ "$project_name" }}) {
        my $user = $_->{ "user" };
        my $host = $_->{ "host" };
        my $uhost = $user."\@".$host.":";
        my %params = (
            user => $_->{ "user" }
        );
        my $out = undef;
        if(defined $confs{ "$project_name" }->{ "git_address" }) {
            my $git_address = $confs{ "$project_name" }->{ "git_address" };
            my $dir = $confs{ "$project_name" }->{"dest_dir"};
            &add_server_version($project_name, $host, $_->{ "user" }, $dir, $version);
            my $ssh = &connect_server($host, $user);
            my @args = ("type", "git");
            $out = $ssh->system(@args);
            if($out == 0) {
                @args = ("ls", "$dir"."/".$version);
                $out = $ssh->system(@args);
                if($out == 0) {
                    my $p = "Please input y or n %d> ";
                    printf( $p, 0 );    
                    while( <> ) {
                        do {
                            @args = ("git", "clone", "$git_address", "$dir"."/".$version);    
                            $out = $ssh->system(@args);
                            last;
                        } if m/y/i;
                        do {
                            $out = 201;
                            last;
                        } if m/n/i;
                        printf( $p, $. );
                    }
                } else {
                    @args = ("git", "clone", "$git_address", "$dir"."/".$version);
                    $out = $ssh->system(@args);
                }
            } else {
                print color("red");
                print $host." has not install git yet!\n";
                print color("reset");
            }
        } else {
            my $source_dir = $confs{"$project_name"}->{ "source_dir" };
            my $dir = $confs{ "$project_name" }->{"dest_dir"};
            &add_server_version($project_name, $host, $_->{ "user" }, $dir, $version);
            open my $oldout, ">&", \*STDOUT or die "error";
            open STDOUT, '>', '/dev/null' or die "error";
            my @args = ("scp", "-r", "$source_dir", $uhost.$dir."/".$version."/");
            $out = system(@args);
            open STDOUT, ">&", $oldout;
            
        }
        if($out == 201) {
            print color("yellow");
            print $host." has haved the version $version, and you choose not cover!";
        }elsif($out == 0) {
            print color("green");
            print $host." publish successful.\n";
        } else {
            print color("red");
            print $host." publish fail.\n";
        }
        print color("reset");
    }
}

sub add_server_version {
    my ($project_name, $host, $user, $dest_dir, $version) = @_;
    my $ssh = &connect_server($host, $user);
    my @args = ("mkdir", $dest_dir."/".$version);
    my $out = $ssh->system(@args);
}

sub connect_server {
    my ($host, $user) = @_;
    my $ssh = Net::OpenSSH->new($host, (user=>$user));
    print color("red");
    $ssh->error and die "Couldn't establish SSH connection: ". $ssh->error;
    print color("reset");
    return $ssh;
}

sub list_versions {
    my ($project_name) = @_;
    &load_conf;
    &project_exist_check($project_name);
    #print versions of one server(use iPublish default every servers' versions are same)
    foreach(@{$servers{ "$project_name" }}) {
        my $host = $_->{ "host" };
        my %params = (
            user => $_->{ "user" }
        );
        my $dir = $confs{ "$project_name" }->{"dest_dir"};
        my $ssh = Net::OpenSSH->new($host, %params);
        my $cmd = "ls -l $dir";
        my @out = $ssh->capture( $cmd );
        shift @out;
        print color("yellow");
        foreach (@out) {
            my @line = split(' ', $_);   
            print pop(@line);
            print "\n";
        }
        print color("reset");
        exit;
    }
}

sub load_conf {
    if(open(CONF, "$ENV{'HOME'}/.iPublish")) {
        #begin to parser conf
        my $mutex = -1;
        my $project_name;
        my $i = 0;
        while(<CONF>) {
            if($_ =~ m/\s*project\s*\{\s*/i) {
                #project block enter
                $mutex++;
            } elsif(m/\s*name\s*(\w+);\s*/ && $mutex == 0) {
                #project name $1
                $project_name = $1;
                if(exists $confs{$1}) {
                    push(@errmsg, "Project $1 duplicated!");
                }
            } elsif(m/\s*version_file\s*((\/\w+)+);\s*/ && $mutex == 0) {
                #version file location 
                $confs{"$project_name"}{"version_file"} = $1;
            } elsif(m/\s*source_dir\s*((\/(.?\w+)+)+);\s*/ && $mutex == 0) {
                #source dir $1
                $confs{"$project_name"}{ "source_dir" } = $1; 
            } elsif(m/\s*git_address\s*(\w+\@\w+(\.\w+)+:\w+\/\w+(\.git)?);\s*/ && $mutex == 0) {
                $confs{"$project_name"}{ "git_address" } = $1;
            } elsif(m/\s*dest_dir\s*((\/\w+)+);\s*/ && $mutex == 0) {
                #dest dir $1
                $confs{"$project_name"}{ "dest_dir" } = $1;
            } elsif(m/\s*server\s*\{\s*/ && $mutex == 0) {
                #server block enter
                $mutex++;
            } elsif(m/\s*host\s*(\w+(\.\w+)+);\s*/ && $mutex == 1) {
                #one host address $1
                $servers{"$project_name"}[$i]{ 'host' } = $1;
            } elsif(m/\s*user\s*(\w+);\s*/ && $mutex == 1) {
                # host user name $1
                $servers{"$project_name"}[$i]{ 'user' } = $1;
            } elsif(m/\s*\}\s*/ && $mutex == 1) {
                # server block out
                $i++;
                $mutex--;
            } elsif(m/(\s*\}\s*)/ && $mutex == 0) {
                # project block out
                $mutex--;
                $i = 0;
            }
        }
    } else {
        print color("red");
        print "Can not read config file.\n";
        print "Error:$!\n";
        print color("reset");
        exit;
    }  
    close CONF;
    if(scalar(@errmsg) > 0) {
        for(@errmsg) {
            print color("red");
            print $_;
            print "\n";
        }
        print color("reset");
        exit;
    }
}

#check if a project conf exists in iPublish
sub project_exist_check {
    #check project if exists in iPublish
    my ($project_name) = @_;
    if(not exists $confs{"$project_name"}) {
        print color("red");
        print "You have not add project $project_name to iPublish!";
        print "\n";
        print color("reset");
        exit;
    } else {
        #delete redundant project confs
        foreach my $key (keys %confs) {
            if($key ne $project_name){
                delete $confs{$key};
                delete $servers{$key};
            }
        }
    }
}

sub all_versions_exist_check {
    #check version exists in the project after project exists check
    my ($project_name, $version) = @_;
    my $dest_dir = $confs{ "$project_name" }->{ "dest_dir" };
    foreach(@{$servers{ "$project_name" }}) {
        my $host = $_->{ "host" };
        my $res = &server_version_check($project_name, $host, $version);
        if(not defined $res) {
            print color("red");
            print "$host does not exist version: $version. Please check.\n";
            print color("resest");
            exit;
        } 
    }
}

#check one version exists in one server of one project
sub server_version_check {
    my ($project_name, $host, $version) = @_;
    my $dest_dir = $confs{ "$project_name" }->{ "dest_dir" };
    my $user;
    foreach(@{$servers{ "$project_name" }}) {
        if($_->{ "host" } eq $host) {
            $user = $_->{ "user" };
        }
    }
    my %params = (
        user => $user
    );
    my $ssh = Net::OpenSSH->new($host, %params);
    my $cmd = "ls $dest_dir"."/".$version;
    open my $oldout, ">&", \*STDOUT or die "error";
    open STDOUT, '>', '/dev/null' or die "error";
    my $res = $ssh->system($cmd);
    open STDOUT, ">&", $oldout;
    return $res;
}

#list all projects confs have added to iPublish
sub list_projects {
    my ($project) = @_;
    &load_conf;
    if(defined $project) {
        &project_exist_check($project);
        print $project."\n";
        if(defined $confs{ "$project" }->{ "git_address" }) {
            print "\tGit Address: ".$confs{ "$project" }->{ "git_address" }."\n";
        } else {
            print "\tSrc Directory: ".$confs{ "$project" }->{ "source_dir" }."\n";
        }
        print "\t"."Dest Directory: ".$confs{ "$project" }->{ "dest_dir" }."\n";
        print "\t"."Version File: ".$confs{ "$project" }->{ "version_file" }."\n";
        print "\tServers:\n";
        foreach (@{$servers{ "$project" }}) {
            print "\t\t"."HostAddress: ".$_->{ "host" }."\n";
            print "\t\t"."HostUser: ".$_->{ "user" }."\n";
        }
    } else {
        foreach my $project_name ( keys %confs) {
            print $project_name."\n";
            if(defined $confs{ "$project_name" }->{ "git_address" }) {
                print "\tGit Address: ".$confs{ "$project_name" }->{ "git_address" }."\n";
            } else {
                print "\tSrc Directory: ".$confs{ "$project_name" }->{ "source_dir" }."\n";
            }
            print "\t"."Dest Directory: ".$confs{ "$project_name" }->{ "dest_dir" }."\n";
            print "\t"."Version File: ".$confs{ "$project_name" }->{ "version_file" }."\n";
            print "\tServers:\n";
            foreach (@{$servers{ "$project_name" }}) {
                print "\t\t"."HostAddress: ".$_->{ "host" }."\n";
                print "\t\t"."HostUser: ".$_->{ "user" }."\n";
            }
        }   
    }
}

sub show_help {
    print "Usage : iPublish\n";
    print "\t[-h | --help] : show help info\n";
    print "\t[-l | --list] : show all projects you have add to iPublish\n";
    print "\t[-l | --list] [-p | --project] <name> : show config info of one project\n";
    print "\t[-p | --project] <name> [-l | --list] : list all versions of your project\n";
    print "\t[-p | --project] <name> -cv : show current version of your project\n";
    print "\t[-p | --project] <name> [-v | --version] <version> : publish a project of a 
        \t\t certain version\n";
    print "\t[-p | --project] <name> -cv <version> : change to new version\n";
}

sub modules_list {
    use ExtUtils::Installed;
    my $inst = ExtUtils::Installed->new();
    my @modules = $inst->modules();

    foreach(@modules){
        my $ver = $inst->version($_) || "No Version";
        printf("%s=>(%s)\n", $_, $ver);
    }
}
